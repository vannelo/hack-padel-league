generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum Level {
  Five
  Four
  Three
  Two
  One
}

enum LeagueStatus {
  Upcoming
  InProgress
  Completed
}

enum TournamentStatus {
  Upcoming
  InProgress
  Completed
}

enum TournamentType {
  League
  Casual
}

enum TournamentRoundStatus {
  Upcoming
  InProgress
  Completed
}

enum TournamentMatchStatus {
  Scheduled
  InProgress
  Completed
}

model Player {
  id                            String                @id @default(uuid())
  name                          String
  email                         String?
  age                           Int?
  phone                         String?
  gender                        Gender
  level                         Level
  leagues                       LeaguePlayer[]        @relation("PlayerLeagues")
  tournamentCouplesAsPlayer1    TournamentCouple[]    @relation("TournamentCouplePlayer1")
  tournamentCouplesAsPlayer2    TournamentCouple[]    @relation("TournamentCouplePlayer2")
  leagueRoundCouplesAsPlayer1   LeagueRoundCouple[]   @relation("LeagueRoundCouplePlayer1")
  leagueRoundCouplesAsPlayer2   LeagueRoundCouple[]   @relation("LeagueRoundCouplePlayer2")
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
}

model League {
  id          String           @id @default(uuid())
  name        String
  level       Level
  status      LeagueStatus     @default(Upcoming)
  startDate   DateTime
  endDate     DateTime
  players     LeaguePlayer[]   @relation("LeaguePlayers")
  tournaments Tournament[]     @relation("LeagueTournaments")
  rounds      LeagueRound[]    @relation("LeagueRounds")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model LeagueRound {
  id        String               @id @default(uuid())
  leagueId  String
  league    League               @relation("LeagueRounds", fields: [leagueId], references: [id], onDelete: Cascade)
  number    Int
  couples   LeagueRoundCouple[]  @relation("RoundCouples")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model LeagueRoundCouple {
  id           String      @id @default(uuid())
  leagueRoundId String
  leagueRound  LeagueRound @relation("RoundCouples", fields: [leagueRoundId], references: [id], onDelete: Cascade)
  player1Id    String
  player2Id    String
  player1      Player      @relation("LeagueRoundCouplePlayer1", fields: [player1Id], references: [id])
  player2      Player      @relation("LeagueRoundCouplePlayer2", fields: [player2Id], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model LeaguePlayer {
  id        String   @id @default(uuid())
  leagueId  String
  playerId  String
  league    League   @relation("LeaguePlayers", fields: [leagueId], references: [id], onDelete: Cascade)
  player    Player   @relation("PlayerLeagues", fields: [playerId], references: [id], onDelete: Cascade)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id              String               @id @default(uuid())
  name            String
  type            TournamentType       @default(Casual)
  leagueId        String?          
  league          League?              @relation("LeagueTournaments", fields: [leagueId], references: [id])
  status          TournamentStatus     @default(Upcoming)
  startDate       DateTime
  endDate         DateTime?
  availableCourts Int                  @default(1)
  couples         TournamentCouple[]   @relation("TournamentCouples")
  rounds          TournamentRound[]    @relation("TournamentRounds")
  winnerCouples   TournamentCouple[]   @relation("TournamentWinners")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model TournamentCouple {
  id               String             @id @default(uuid())
  player1Id        String
  player2Id        String
  player1          Player             @relation("TournamentCouplePlayer1", fields: [player1Id], references: [id])
  player2          Player             @relation("TournamentCouplePlayer2", fields: [player2Id], references: [id])
  tournaments      Tournament[]       @relation("TournamentCouples")
  tournamentsWon   Tournament[]       @relation("TournamentWinners")
  matchesAsCouple1 TournamentMatch[]  @relation("TournamentMatchCouple1")
  matchesAsCouple2 TournamentMatch[]  @relation("TournamentMatchCouple2")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TournamentRound {
  id           String                 @id @default(uuid())
  tournamentId String
  number       Int
  status       TournamentRoundStatus  @default(Upcoming)
  matches      TournamentMatch[]      @relation("TournamentRoundMatches")
  tournament   Tournament             @relation("TournamentRounds", fields: [tournamentId], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model TournamentMatch {
  id           String                 @id @default(uuid())
  roundId      String
  couple1Id    String
  couple2Id    String
  couple1Score Int?
  couple2Score Int?
  status       TournamentMatchStatus  @default(Scheduled)
  round        TournamentRound        @relation("TournamentRoundMatches", fields: [roundId], references: [id])
  couple1      TournamentCouple       @relation("TournamentMatchCouple1", fields: [couple1Id], references: [id])
  couple2      TournamentCouple       @relation("TournamentMatchCouple2", fields: [couple2Id], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

